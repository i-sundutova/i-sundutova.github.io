{"version":3,"sources":["utils/Languages.js","components/partials/LanguageSwitcher.js","components/MainMenu.js","components/SideBar.js","components/MainBar.js","components/Layout.js","components/Home.js","components/Contacts.js","App.js","registerServiceWorker.js","store.js","index.js","components/partials/LanguageContainer.js"],"names":["Languages","LanguageSwitcher","props","lang","store","_state","language","changeLanguage","className","onClick","MainMenu","this","dictionary","home","skills","contacts","Component","displayName","name","MainMenuContent","to","SideBar","id","MainBar","children","Layout","Home","surname","text","HomeContent","params","color","value","Contacts","pageName","ContactsContent","NoFound","App","path","exact","render","propRouter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","checkLanguage","localStorage","getItem","setLanguage","urlLanguage","pathname","substring","newLang","setItem","newLanguage","url","href","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8a5fae28.chunk.js","sourcesContent":["export const Languages = {\r\n    EN: 'en',\r\n    UA: 'ua'\r\n}","import React from 'react';\r\nimport { Languages } from '../../utils/Languages';\r\n\r\nexport const LanguageSwitcher = (props) => {\r\n    let lang = props.store._state.language;\r\n\r\n    let changeLanguage = (lang) => {\r\n        props.store.changeLanguage(lang);\r\n    }\r\n\r\n        return (\r\n            <div className=\"language-switcher\">\r\n                <span className={\"language\" + (lang == Languages.EN ? \" disabled\" : \"\")} onClick={() => changeLanguage(Languages.EN)}>en</span>\r\n                <span className={\"language\" + (lang == Languages.UA ? \" disabled\" : \"\")} onClick={() => changeLanguage(Languages.UA)}>ua</span>\r\n            </div>);\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Languages } from '../utils/Languages';\r\n\r\n\r\nexport class MainMenu extends Component {\r\n    static displayName = MainMenu.name;\r\n\r\n    render() {\r\n        let language = this.props.language;\r\n\r\n        let enDictionary = { home: 'home', skills: 'skills', contacts: 'contacts' };\r\n        let uaDictionary = { home: 'головна', skills: 'навики', contacts: 'контакти' };\r\n        \r\n\r\n        if (language == Languages.EN) {\r\n            return <MainMenuContent dictionary={enDictionary} language={language} />\r\n        }\r\n        else {\r\n            return <MainMenuContent dictionary={uaDictionary} language={language} />\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst MainMenuContent = (props) => {\r\n    return (\r\n        <div className=\"main-menu\">\r\n            <Link to={'/' + props.language + '/'} className=\"menu-item\">\r\n                <span className=\"item\">{props.dictionary.home}</span>\r\n            </Link>\r\n\r\n            <Link to={'/' + props.language + '/skills'} className=\"menu-item\">\r\n                <span className=\"item\">{props.dictionary.skills}</span>\r\n            </Link>\r\n\r\n            <Link to={'/' + props.language + '/contacts'} className=\"menu-item\">\r\n                <span className=\"item\">{props.dictionary.contacts}</span>\r\n            </Link>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { LanguageSwitcher } from './partials/LanguageSwitcher';\r\nimport { MainMenu } from './MainMenu';\r\n\r\nexport const SideBar = (props) => {\r\n\r\n    return (\r\n        <div id=\"side-bar\">\r\n            <div className=\"logo\"></div>\r\n\r\n            <MainMenu language={props.store._state.language} />\r\n\r\n            <LanguageSwitcher store={props.store} />\r\n        </div>)\r\n}","import React, { Component } from 'react';\r\n\r\nexport class MainBar extends Component {\r\n    static displayName = MainBar.name;\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"main-bar\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { SideBar } from './SideBar';\r\nimport { MainBar } from './MainBar';\r\n\r\nexport const Layout = (props) => {\r\n\r\n    return (\r\n        <div id=\"main-container\">\r\n            <SideBar store={props.store} />\r\n\r\n            <MainBar>\r\n                {props.children}\r\n            </MainBar>\r\n      </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport { Languages } from '../utils/Languages';\r\n\r\n\r\nexport class Home extends Component {\r\n    static displayName = Home.name;\r\n\r\n    render() {\r\n\r\n        let enDictionary = { name: 'ryna', surname: 'Martyniuk', text: 'web developer' };\r\n        let uaDictionary = { name: 'рина', surname: 'Мартинюк', text: 'web developer' };\r\n        \r\n\r\n        if (this.props.language === Languages.EN) {\r\n            return <HomeContent dictionary={enDictionary} />\r\n        }\r\n        else { return <HomeContent dictionary={uaDictionary} /> }\r\n    }\r\n}\r\n\r\n\r\nconst HomeContent = (props) => {\r\n    return (\r\n        <div id=\"page-home\">\r\n            <Particles className=\"particles-container\"\r\n                params={{\r\n                    \"particles\": { \"number\": { \"value\": 50 }, \"size\": { \"value\": 3 }, color: { value: '#ffbf00' } },\r\n                    \"interactivity\": { \"events\": { \"onhover\": { \"enable\": true, \"mode\": \"repulse\" } } }\r\n                }} />\r\n\r\n            <div className=\"introduction-container\">\r\n                <div className=\"name\"><span className=\"monoton\">I</span>{props.dictionary.name}</div>\r\n                <div className=\"surname\">{props.dictionary.surname}</div>\r\n                <p>{props.dictionary.text}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Languages } from '../utils/Languages';\r\n\r\nexport const Contacts = (props) => {\r\n\r\n    let enDictionary = { pageName: 'Contacts' };\r\n    let uaDictionary = { pageName: 'Контакти' };\r\n\r\n\r\n    if (props.language == Languages.EN) {\r\n        return <ContactsContent dictionary={enDictionary} />\r\n    }\r\n    else { return <ContactsContent dictionary={uaDictionary} /> }\r\n}\r\n\r\n\r\nconst ContactsContent = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>{props.dictionary.pageName}</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport { Layout } from './components/Layout';\r\nimport { Home } from './components/Home';\r\nimport { Contacts } from './components/Contacts';\r\n\r\nimport './styles/compiled.scss'\r\n\r\n\r\n\r\nconst App = (props) => {\r\n    let language = props.store._state.language;\r\n\r\n    debugger;\r\n\r\n    return (\r\n        <Layout store={props.store} >\r\n                <Switch>\r\n                {/*<Route path=\"/\" exact render={() => { return <Redirect to={language} /> }} />*/}\r\n                    <Route path={\"/\" + language} exact render={propRouter => <Home {...propRouter} language={language} />} />\r\n                    <Route path={\"/\" + language + \"/contacts\"} render={propRouter => <Contacts {...propRouter} language={language} />} />\r\n\r\n                    <Route path=\"*\" render={propRouter => <NoFound {...propRouter} />} />\r\n                </Switch> \r\n            </Layout >\r\n        );\r\n}\r\n\r\n\r\nconst NoFound = (props) => {\r\n    return <div>\r\n        <h1>404</h1>\r\n    </div>\r\n}\r\n\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { Languages } from \"./utils/Languages.js\";\r\n\r\nlet store = {\r\n    _state: {\r\n        language: Languages.EN\r\n    },\r\n\r\n    checkLanguage() {\r\n        debugger;\r\n\r\n        let lang = window.localStorage.getItem('portfolio-lang');\r\n\r\n        if (lang === null || lang == 'undefined') this.setLanguage(Languages.EN);\r\n\r\n        else if ((lang === Languages.EN || lang === Languages.UA) && lang !== this._state.language) this.setLanguage(lang);\r\n\r\n\r\n        let urlLanguage = window.location.pathname.substring(0, 4);\r\n\r\n        if (urlLanguage.match(`/${Languages.EN}`) !== null || urlLanguage.match(`/${Languages.UA}`) !== null) {\r\n\r\n            urlLanguage = urlLanguage.substring(1, 3);\r\n\r\n            if (this._state.language !== urlLanguage) this.setLanguage(urlLanguage);\r\n        }\r\n\r\n    },\r\n\r\n    setLanguage(newLang) {\r\n        debugger;\r\n\r\n        window.localStorage.setItem('portfolio-lang', newLang);\r\n        this._state.language = newLang;\r\n    },\r\n\r\n    changeLanguage(newLanguage) {\r\n        debugger;\r\n\r\n        let pathname = window.location.pathname;\r\n        let urlLanguage = pathname.substring(0, 4);\r\n\r\n        let url = '';\r\n\r\n        if (urlLanguage.match('/' + Languages.EN) !== null || urlLanguage.match('/' + Languages.UA) !== null) {\r\n\r\n            if (urlLanguage.match('[a-z]{2}') == newLanguage) return;\r\n\r\n            url = '/' + newLanguage + pathname.substring(3);\r\n        }\r\n        else {\r\n            url = '/' + newLanguage + pathname;\r\n        }\r\n\r\n        //this.props.history.push(url);\r\n        window.location.href = url;\r\n    }\r\n}\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { LanguageContainer } from './components/partials/LanguageContainer';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport store from './store.js'\r\n\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <LanguageContainer store={store} />\r\n    </Router>,\r\n    document.getElementById('root'));\r\n\r\nregisterServiceWorker();\r\n\r\n","import React from 'react';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\nimport App from '../../App';\r\nimport { Languages } from '../../utils/Languages';\r\n\r\nexport const LanguageContainer = (props) => {\r\n\r\n    props.store.checkLanguage();\r\n   \r\n\r\n    return (\r\n        //<Switch>\r\n        //    <Route path=\"/\" exact render={() => { return <Redirect to={language} /> }} />\r\n        //    <Route path=\"/*\" render={propsRouter => <App {...propsRouter} language={language} setLanguage={this.setLanguage} />} />\r\n        //</Switch>\r\n\r\n        <App store={props.store} />\r\n    )\r\n}"],"sourceRoot":""}